{"version":3,"sources":["constants/tiledMapData.ts","components/pixi/RectTileLayer.tsx","reducers/wmsReducer.ts","components/Tilemap.tsx","reducers/gameStateReducer.ts","reducers/pickingListsReducer.ts","reducers/warehouseReducer.ts","appState.ts","reducers/statusTextReducer.ts","reducers/mutedReducer.ts","reducers/timeReducer.ts","components/context/AppProvider.tsx","components/pixi/Box.tsx","components/pixi/Guy.tsx","components/pixi/SpriteAnimated.tsx","components/pixi/WarehouseGuy.tsx","components/Scene.tsx","components/ui/IPad/content/SKUProfile.tsx","components/ui/IPad/content/PickingLists.tsx","components/ui/IPad/index.tsx","components/ui/StartButton.tsx","components/ui/StatusText.tsx","components/ui/Settings/index.tsx","components/ui/GameOverScreen/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TiledLayerType","Orientation","RenderOrder","window","PIXI","Categories","RectTileLayer","PixiComponent","create","props","require","tilemap","CompositeRectTileLayer","texture","applyProps","instance","oldProps","layer","tileset","horizontalTiles","spritesheet","data","i","length","w","tilewidth","h","tileheight","x","y","Math","floor","spriteId","name","addFrame","textures","Tilemap","basePath","setObjects","setWallLocations","useState","layers","setLayers","debug","useEffect","spritesheetData","parseSpritesheetData","getTileset","from","image","baseTexture","wallLocations","parse","filter","visible","map","properties","some","p","value","addAllTilesInLayerToList","width","createTileLayer","objectLayer","find","type","objectgroup","objects","reduce","acc","location","mapData","tilesets","Error","console","warn","source","key","columns","frames","tilecount","frame","spriteSourceSize","rotated","trimmed","sourceSize","meta","size","imagewidth","imageheight","scale","list","tile","index","push","GameState","initialWMSState","category","A","productCode","description","pair","B","C","D","pickingListsReducer","state","action","pL","orderNo","guy","pickedProducts","complete","undefined","initialWarehouseState","boxes","zone","warehouseReducer","gameStateReducer","pickingBoxes","placingBoxes","initialState","statusText","gameState","wms","pickingLists","products","random","toString","slice","warehouse","muted","localStorage","getItem","time","statusTextReducer","text","mutedReducer","setItem","timeReducer","performance","now","start","AppContext","createContext","dispatch","reducer","AppProvider","children","useReducer","Provider","PixiPlugin","registerPIXI","gsap","registerPlugin","Box","tileWidth","tileHeight","behindWall","selected","ref","useRef","imgRef","dragRef","offset","useMemo","onDragStart","event","current","currentTarget","zIndex","stopPropagation","onClick","getLocalPosition","onDragEnd","onReleased","onDragMove","parentPos","parent","position","onDragged","img","process","mousedown","touchstart","mouseup","mouseupoutside","mousemove","touchmove","draw","graphics","clear","lineStyle","drawRect","endFill","anchor","alpha","newProps","applyDefaultProps","gotoAndPlay","Guy","forwardRef","atlas","carryBox","containerProps","setFrames","right","orientation","setOrientation","app","useApp","lastPositionPoint","useTick","currentPosition","lastPosition","equals","angle","atan2","PI","front","left","back","clone","loader","onComplete","once","allFrames","resources","indexedTextures","Object","keys","animation","substring","loading","add","load","animationFrames","SpriteAnimated","animationSpeed","isPlaying","memo","convertLocation","pickingList","aStar","homeLocation","tileSize","getProductLocation","guyProps","guyRef","setCarryBox","lastLocation","currentDestination","includes","destination","killTweensOf","tl","timeline","pathStartLocation","far","path","findPath","forEach","loc","to","ease","Linear","easeNone","pixi","duration","delay","endLocation","Scene","height","restProps","useContext","setMapData","selectedBox","setSelectedBox","jsonPath","substr","lastIndexOf","sound","stop","play","getObject","useCallback","object","pointToSceneLocation","point","getBoxNameAtLocation","entry","entries","box","locationIsBlocked","l","matrix","row","blocked","AStarFinder","grid","diagonalAllowed","includeStartNode","heuristic","weight","pickingList1","setPickingList1","pickingList2","setPickingList2","pickingList3","setPickingList3","nextPickingList1","nextPickingList2","nextPickingList3","interactive","hitArea","sortableChildren","onProductClick","global","tint","otherBoxName","setTint","handleDragged","originX","originY","handleBoxDragEnd","isNorthOfWall","obj","ghost","c","wL","SKUProfile","tableRef","table","querySelectorAll","selectedProduct","classList","scrollIntoView","block","remove","renderRow","data-code","colSpan","className","PickingLists","productNameMap","renderPickingList","pList","renderProduct","completed","IPad","renderContent","StartButton","values","b","reload","StatusText","timeout","setInterval","clearTimeout","progressBarWidth","min","progressColor","style","backgroundColor","formatTime","ms","seconds","hours","minutes","padLeft","toFixed","padStart","input","Settings","onChange","e","target","checked","show","setShow","setTimeout","totalScore","pairs","indexOf","getProductRow","display","correct","total","points","location1","location2","abs","getPairRow","getBinRow","App","setSelectedProduct","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a885263.chunk.js","sourcesContent":["export interface TiledMapData {\n  width: number;\n  height: number;\n  tilewidth: number;\n  tileheight: number;\n  infinite: boolean;\n  backgroundcolor: string | null;\n  orientation: Orientation;\n  renderorder: RenderOrder;\n  tilesets: TiledTilesetData[];\n  layers: TiledLayerData[];\n}\n\nexport interface TiledTilesetData {\n  columns: number;\n  firstgid: number;\n  source: string;\n  image: string;\n  imagewidth: number;\n  imageheight: number;\n  tilewidth: number;\n  tileheight: number;\n  tilecount: number;\n  name: string;\n  margin: number; // todo: \n  spacing: number; // todo\n  tiles?: TileData[];\n}\n\nexport interface TileData {\n  id: number,\n  properties?: TiledProperty[];\n}\n\nexport interface TiledLayerData {\n  data: number[];\n  objects: TiledObjectData[];\n  type: TiledLayerType;\n  height: number;\n  id: number;\n  name: string;\n  opacity: number; // not supported atm\n  visible: boolean;\n  x: number;\n  y: number;\n  width: number;\n  properties?: TiledProperty[];  \n}\n\nexport interface TiledObjectData {\n  gid: number;\n  id: number;\n  name: string;\n  properties?: TiledProperty[];  \n  type: string;\n  visible: boolean;\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n}\n\nexport enum TiledLayerType {\n    tilelayer = \"tilelayer\",\n    objectgroup = \"objectgroup\"\n}\n\nexport interface TiledProperty {\n  name: string,\n  type: string,\n  value: any\n}\n\nenum Orientation {\n  orthagonal = \"orthagonal\",\n  isometric = \"isometric\",\n  staggered = \"staggered\",\n  hexagonal = \"hexagonal\"\n}\n\nenum RenderOrder {\n  rightUp = \"right-up\",\n  rightDown = \"right-down\",\n  leftUp = \"left-up\",\n  leftDown = \"left-down\"\n}\n\n\n","import { PixiComponent } from \"@inlet/react-pixi\";\nimport * as PIXI  from 'pixi.js';\nimport { TiledLayerData, TiledTilesetData } from 'constants/tiledMapData';\n\nwindow.PIXI = PIXI;\n\ninterface Props  {\n  texture: PIXI.Texture;\n  horizontalTiles: number;\n  layer: TiledLayerData;\n  tileset: TiledTilesetData;\n  spritesheet: PIXI.Spritesheet;\n};\n\nconst RectTileLayer = PixiComponent<Props, any>(\"RectTileLayer\", {\n  create(props: Props) {    \n    require('pixi-tilemap');    \n    var tileLayer = new window.PIXI.tilemap.CompositeRectTileLayer(0, [props.texture]);\n    return tileLayer;\n  },\n\n  applyProps(instance, oldProps: Props, props: Props) {\n    const {layer, tileset, horizontalTiles,spritesheet} = props;\n    if (!layer.data) {\n      return;\n    }\n    for (let i = 0; i < layer.data.length; i++) {\n      const w = tileset.tilewidth;\n      const h = tileset.tileheight;\n      const x = (i % horizontalTiles) * w;\n      const y = Math.floor(i / horizontalTiles) * h;\n    \n      if (layer.data[i] > 0) {\n        const spriteId = `${tileset.name}-${layer.data[i]}`;\n        instance.addFrame(spritesheet.textures[spriteId], x, y);\n      }\n    }\n  }\n});\n\nexport default RectTileLayer;\n\n","\nexport enum Categories {\n  A = \"A\", //these get compared to the zones in the tilemap\n  B = \"B\",\n  C = \"C\",\n  D = \"D\"\n}\n\nexport interface WMSData {\n  category: Categories;\n  productCode: string;\n  description: string; \n  pair?: string;\n}\n\nexport const initialWMSState = [{\n  category: Categories.A,\n  productCode: \"IRN 590\",\n  description: \"Clothes iron\",\n}, {\n  category: Categories.A,\n  productCode: \"CAM 679\",\n  description: \"Digital camera\",\n}, {\n  category: Categories.A,\n  productCode: \"SMK 019\",\n  description: \"Smoke detector\",\n  pair: \"BAT 917\"\n}, {\n  category: Categories.A,\n  productCode: \"BAT 917\",\n  description: \"Battery charger\",\n  pair: \"SMK 019\"\n}, {\n  category: Categories.B,\n  productCode: \"VRL 444\",\n  description: \"VR headset\",\n}, {\n  category: Categories.B,\n  productCode: \"PTV 555\",\n  description: \"Plasma TV\",\n  pair: \"SPK 876\"\n}, {\n  category: Categories.B,\n  productCode: \"SPK 876\",\n  description: \"Speaker system\",\n  pair: \"PTV 555\"\n}, {\n  category: Categories.C,\n  productCode: \"WSH 322\",\n  description: \"Washing machine\",\n}, {\n  category: Categories.C,\n  productCode: \"RFG 411\",\n  description: \"Refrigerator\",\n}, {\n  category: Categories.C,\n  productCode: \"SMX 041\",\n  description: \"Stand mixer\",\n}, {\n  category: Categories.D,\n  productCode: \"TPH 255\",\n  description: \"Telephone\",\n}, {\n  category: Categories.D,\n  productCode: \"CST 964\",\n  description: \"Cassette player\",\n}]","import React, { useState } from 'react';\nimport { TiledMapData, TiledLayerData, TiledTilesetData, TiledLayerType, TiledObjectData } from 'constants/tiledMapData';\nimport { Container, Text, Graphics } from '@inlet/react-pixi';\nimport { useEffect } from 'react';\nimport { SpritesheetData, SpriteData } from 'constants/spritesheetData';\nimport RectTileLayer from 'components/pixi/RectTileLayer';\nimport * as PIXI from 'pixi.js';\n\ninterface Props {\n  basePath: string;\n  data: TiledMapData;\n  setObjects: (data: {[key: string]: TiledObjectData}) => void;\n  setWallLocations: (tiles: [number, number][]) => void;\n}\n\nconst DEBUG = false;\n\nconst Tilemap = (props: Props) => {\n  const {\n    basePath, \n    data, \n    setObjects,\n    setWallLocations\n  } = props;\n  const [layers, setLayers] = useState<JSX.Element[]>();\n  const [debug, setDebug] = useState<JSX.Element[]>();\n\n  useEffect(() => {\n    const spritesheetData = parseSpritesheetData(data);\n    const tileset = getTileset(data);\n\n    const texture = PIXI.Texture.from(`${basePath}/${tileset.image}`);\n    const baseTexture = PIXI.BaseTexture.from(`${basePath}/${tileset.image}`);\n    const spritesheet = new PIXI.Spritesheet(baseTexture, spritesheetData);\n    const wallLocations: [number, number][] = [];\n\n    spritesheet.parse(() => {\n      const layers = data.layers.filter(layer => layer.visible).map(layer => {\n\n        // walls are marked on the tileset with property 'wall'\n        if (layer.properties && layer.properties.some(p => p.name === 'wall' && p.value === true)){\n          addAllTilesInLayerToList(wallLocations, layer, layer.width);\n        }\n        \n        return createTileLayer(layer, texture, data.width, tileset, spritesheet);\n      });\n\n      // The racks are placed in a special layer with property 'racks'\n      const objectLayer = data.layers.find(layer => layer.type === TiledLayerType.objectgroup);\n      if (objectLayer) {\n    \n        const objects: { [key: string]: TiledObjectData } = objectLayer.objects.reduce((acc: {[key: string]: TiledObjectData}, value: TiledObjectData) => {\n          const {x, y} = value;\n          const location = [\n            x / data.tilewidth, \n            y / data.tileheight - 1\n          ];\n          acc[`${location[0]},${location[1]}`] = value;\n          return acc;\n        }, {});\n        setObjects(objects);\n      }\n      setWallLocations(wallLocations);\n      setLayers(layers);\n      \n      if (DEBUG){\n        setDebug(getDebug(data.layers[0].data.length, data.layers[0].width, tileset.tilewidth, tileset.tileheight, wallLocations))\n      }\n    });\n\n  }, [basePath, data, setObjects, setWallLocations]);\n  return (\n    <Container >\n      {layers}\n      {debug}\n    </Container>\n  );\n}\n\nexport default Tilemap;\n\nconst getDebug = (tileCount: number, columns: number, tileWidth: number, tileHeight: number, blockedTiles: number[][]) => {\n  const elements = [];\n  for (let i = 0 ; i < tileCount ; i++) {\n    const location = [(i % columns),  Math.floor(i / columns)];\n    const x = location[0] * tileWidth;\n    const y = location[1] * tileHeight;\n    var style = {\n      fontSize: 12,\n      align: 'center',\n      fill : '0x0',\n      strokeThickness : 1,\n      wordWrap : true,\n      wordWrapWidth : 440\n    };\n    // tile index\n    // elements.push(<Text key={`${x},${y}`} style={style} text={`${i}`} x={x} y={y}/>);\n\n    // tile location\n    elements.push(<Text key={`${x},${y}`} style={style} text={`[${location[0]},${location[1]}]`} x={x} y={y}/>);\n\n    // // blocked\n    elements.push(<Graphics\n      key={`blocked_${x},${y}`}\n      x={x} y={y}\n      draw={graphics => {\n        const line = 1;\n        const blocked = blockedTiles.some((loc) => loc[0] === location[0] && loc[1] === location[1]);\n        const color = blocked ? 0xFF3300 : 0x00FF00;\n        graphics.lineStyle(line, color);\n        graphics.drawRect(line / 2, line / 2, tileWidth - line / 2, tileHeight - line / 2);\n        graphics.endFill();\n      }}\n    />)\n  }\n  return elements;\n}\n\nconst getTileset = (mapData: TiledMapData) => {\n  if (!mapData.tilesets.length) {\n    throw new Error(\"No tilesets found! Can't continue\");\n  }\n  if (mapData.tilesets.length > 1) {\n    console.warn(\"Found more than one tileset. But we currently only support one.\");\n  }\n  if (mapData.tilesets[0].source) {\n    throw new Error(\"Please embed tilemaps in Tiled! Can't continue\");\n  }\n  return mapData.tilesets[0];\n}\n\nconst createTileLayer = (layer: TiledLayerData, texture: PIXI.Texture, horizontalTiles: number, tileset: TiledTilesetData, spritesheet: PIXI.Spritesheet) => {\n  return (\n    <RectTileLayer\n      key={layer.name}\n      texture={texture} \n      layer={layer} \n      horizontalTiles={horizontalTiles}\n      tileset={tileset}\n      spritesheet={spritesheet}\n    />\n  );\n}\n\nconst parseSpritesheetData = (mapData: TiledMapData): SpritesheetData => {\n  const tileset = getTileset(mapData);\n  const columns = tileset.columns;\n\n  const frames: { [name: string]: SpriteData } = {};\n  for (let i = 0; i < tileset.tilecount; i++) {\n    const w = tileset.tilewidth;\n    const h = tileset.tileheight;\n    const x = (i % columns) * w;\n    const y = Math.floor(i / columns) * h;\n\n    frames[`${tileset.name}-${i + 1}`] = { \n      frame: {x, y, w, h},\n      spriteSourceSize: {x, y, w, h},\n      rotated: false,\n      trimmed: false,\n      sourceSize: { w, h}\n    };\n  }\n  const image = tileset.image;\n  const size = { w: tileset.imagewidth, h: tileset.imageheight };\n  return {\n    frames,\n    meta: {\n      image,\n      size,\n      scale: 1\n    }\n  };\n}\n\n/** Add tiles in this layer to list */\nconst addAllTilesInLayerToList = (list: [number, number][], layer: TiledLayerData, columns: number) => {\n  layer.data.reduce((acc: [number, number][], tile, index) => {\n    if (tile > 0) {\n      const x = (index % columns);\n      const y = Math.floor(index / columns);\n      acc.push([x, y]);  \n    }\n    return acc;\n  }, list);\n}","\nexport enum GameState {\n  placingBoxes,\n  pickingBoxes,\n  complete,\n}\n\nexport type GameStateAction =\n | { type: 'startPicking' }\n | { type: 'completeGame' }\n | { type: 'restart' };\n\nexport const gameStateReducer = (state: GameState, action: GameStateAction ) => {\n  switch (action.type) {\n    case 'startPicking':\n      return GameState.pickingBoxes;\n    case 'completeGame':\n      return GameState.complete;\n    case 'restart':\n      return GameState.placingBoxes;\n    default:\n      return state;\n  }\n}","\nexport interface PickingList {\n  products: string[];\n  pickedProducts?: string[]; // when a product from `product` is picked it appears in this list\n  guy?: number;               // who is currently picking this list\n  complete?: boolean;        // when list is completely picked and the picker has returnwed with all the items \n  // clientName? \n  orderNo: string;\n}\n\nexport const generateInitialPickingLists = (): PickingList[] => {\n  // the actual products are not random, but the rest of the data is\n  const productPickingList = [\n    [\"IRN 590\", \"CAM 679\"],\n    [\"CAM 679\", \"VRL 444\", \"IRN 590\"],\n    [\"RFG 411\", \"IRN 590\", \"CAM 679\"],\n    [\"VRL 444\", \"SMK 019\", \"BAT 917\", \"SPK 876\", \"PTV 555\"],\n    [\"SMX 041\", \"PTV 555\", \"SPK 876\", \"CAM 679\"],\n    [\"BAT 917\", \"SMK 019\", \"IRN 590\", \"WSH 322\"]\n  ];\n\n  return productPickingList.map(products => {\n    return {\n      orderNo: Math.random().toString().slice(2, 9),\n      products\n    } \n  });\n}\n\nexport type PickingListsAction =\n | { type: 'startPicking', guy: number, orderNo: string }\n | { type: 'completeProductPick', productCode: string, orderNo: string }\n | { type: 'completeOrder', orderNo: string }\n | { type: 'restart' };\n\n \nexport const pickingListsReducer = (state: PickingList[], action: PickingListsAction ) => {\n  switch (action.type) {\n    case 'startPicking':\n      return state.map(pL => {\n        if (pL.orderNo === action.orderNo) {\n          return { \n            ...pL,\n            guy: action.guy\n          }\n        }\n        return pL;\n      })\n    case 'completeProductPick':\n      return state.map(pL => {\n        if (pL.orderNo === action.orderNo) {\n          return { \n            ...pL,\n            pickedProducts: [ \n              ...pL.pickedProducts || [], \n              action.productCode\n            ]\n          }\n        }\n        return pL;\n      })\n    case 'completeOrder':\n      return state.map(pL => {\n        if (pL.orderNo === action.orderNo) {\n          return { \n            ...pL,\n            complete: true\n          }\n        }\n        return pL;\n      });\n    case 'restart':\n      return state.map(pL => ({\n        ...pL,\n        guy: undefined,\n        complete: false,\n        pickedProducts: []\n      }));\n    default:\n      return state;\n  }\n}","import { initialWMSState } from \"./wmsReducer\";\n\nexport interface BoxState {\n  location: [number, number];\n  zone?: string; // A-C: in rack, D: trash, undefined: dock\n}\n\nexport interface WarehouseState {\n  boxes: { [id: string]: BoxState }\n}\n\nconst generateBoxLocationsAtDock = () => {\n  const products = initialWMSState.map(p => p.productCode);\n  products.sort(() => (0.5 - Math.random()));\n  return products.reduce((acc: { [id: string]: BoxState }, value: string, index: number) => {\n    acc[value] = { \n      location: [8 + index, 1]\n    }\n    return acc;\n  }, {});\n}\n\n// Use this for debugging. It shows a warehouse where all the boxes are placed\nconst generateBoxLocationsAtRacks = () => {\n  const products = initialWMSState.map(p => p.productCode);\n  products.sort(() => (0.5 - Math.random()));\n  const rackLocations: [number, number][] = [\n    [3, 9],\n    [4, 9],\n    [5, 9],\n    [7, 9],\n    [8, 9],\n    [9, 9],\n    [11, 9],\n    [12, 9],\n    [13, 9],\n    [15, 9],\n    [16, 9],\n    [17, 9],\n    [3, 6],\n    [4, 6],\n    [5, 6],\n    [7, 6],\n    [8, 6],\n    [9, 6],\n    [11, 6],\n    [12, 6],\n    [13, 6],\n    [15, 9],\n  ];\n\n  return products.reduce((acc: { [id: string]: BoxState }, value: string, index: number) => {\n    acc[value] = { \n      location: rackLocations[index],\n      zone: \"A\"\n    }\n    return acc;\n  }, {});\n}\n\nconst generateBadBoxLocations = (): { [id: string]: BoxState } => {\n  const inRack = true;\n  return {\n    \"CST 964\": { location: [9, 9] },\n    \"TPH 255\": { location: [8, 9] },\n    \"DSC 743\": { location: [7, 9] },\n    \"SMX 041\": { location: [5, 9] },\n    \"RFG 411\": { location: [4, 9] },\n    \"WSH 322\": { location: [11, 9] },\n    \"MIC 099\": { location: [12, 9] },\n    \"OTV 482\": { location: [13, 9] },\n    \"MWO 901\": { location: [15, 9] },\n    \"SPK 876\": { location: [16, 9] },\n    \"PTV 555\": { location: [4, 6] },\n    \"VIR 555\": { location: [5, 6] },\n    \"BAT 917\": { location: [7, 6] },\n    \"VAC 082\": { location: [8, 6] },\n    \"DLA 413\": { location: [9, 6] },\n    \"SMK 019\": { location: [11, 6] },\n    \"BAM 223\": { location: [12, 6] },\n    \"CAM 679\": { location: [13, 6] },\n    \"IRN 590\": { location: [15, 6] },\n  };\n}\nconst generateGoodBoxLocations = (): { [id: string]: BoxState } => {\n  \n  return {\n    // fast movers\n    \"IRN 590\": { location: [16, 8], zone: \"A\" },\n    \"CAM 679\": { location: [17, 8], zone: \"A\" },\n    \"BAT 917\": { location: [16, 6], zone: \"A\" },\n    \"SMK 019\": { location: [17, 6], zone: \"A\" },\n\n    // medium movers\n    \"VRL 444\": { location: [11, 8], zone: \"B\" },    \n    \"PTV 555\": { location: [11, 6], zone: \"B\" },\n    \"SPK 876\": { location: [12, 6], zone: \"B\" },\n\n    // slow movers\n    \"WSH 322\": { location: [6, 8], zone: \"C\" },\n    \"SMX 041\": { location: [7, 8], zone: \"C\" },\n    \"RFG 411\": { location: [6, 6], zone: \"C\" },\n\n    // non movers (trash)\n    \"TPH 255\": { location: [1, 6], zone: \"D\" },\n    \"CST 964\": { location: [1, 8], zone: \"D\"},\n  };\n}\n\nexport const initialWarehouseState: WarehouseState = {\n  // boxes: generateBoxLocationsAtDock()\n  // boxes: generateBoxLocationsAtRacks()\n  // boxes: generateBadBoxLocations()\n  boxes: generateGoodBoxLocations()\n}\n\n\nexport type WarehouseAction =\n | { type: 'placeBox'; productCode: string, location: [number, number], zone?: string }\n | { type: 'restart' };\n\nexport const warehouseReducer = (state: WarehouseState, action: WarehouseAction) => {\n  switch (action.type) {\n    case 'placeBox':\n      const { location, zone } = action; \n      const boxes = { \n        ...state.boxes,\n        [action.productCode]: {\n            ...state.boxes[action.productCode],\n            location,\n            zone,\n        }\n      }\n      return { \n        ...state,\n        boxes\n      } ;\n    case 'restart':\n      return initialWarehouseState;  \n    default: {\n        return state;\n    }\n  }\n}\n\n","import { initialWMSState, WMSData } from \"reducers/wmsReducer\";\nimport { generateInitialPickingLists, PickingList } from \"reducers/pickingListsReducer\";\nimport { initialWarehouseState, WarehouseState } from \"reducers/warehouseReducer\";\nimport { GameState } from \"reducers/gameStateReducer\";\n\nexport interface AppState {\n  statusText: string;\n  gameState: GameState,\n  wms: WMSData[];\n  pickingLists: PickingList[];\n  warehouse: WarehouseState; // Where all the boxes are in the warehouse\n  muted: boolean;\n  time: number;\n}\n\n\nexport const initialState: AppState = {\n  statusText: \"\",\n  gameState: GameState.placingBoxes,\n  wms: initialWMSState,\n  pickingLists: generateInitialPickingLists(),\n  warehouse: initialWarehouseState,\n  muted: localStorage.getItem('muted') === 'true',\n  time: 0,\n}\n\n","export type StatusTextAction =\n | { type: 'setStatusText', text: string };\n\n\nexport const statusTextReducer = (state: string, action: StatusTextAction ) => {\n  switch (action.type) {\n    case 'setStatusText':\n      return action.text;\n    default:\n      return state;\n  }\n}","export type MutedReducerAction =\n | { type: 'setMuted', value: boolean };\n\n\nexport const mutedReducer = (state: boolean, action: MutedReducerAction ) => {\n  switch (action.type) {\n    case 'setMuted':\n      localStorage.setItem('muted', action.value ? 'true' : 'false');\n      return action.value;\n    default:\n      return state;\n  }\n}","export type TimeReducerAction =\n | { type: 'tick', start: number };\n\n\nexport const timeReducer = (state: number, action: TimeReducerAction ) => {\n  switch (action.type) {\n    case 'tick':\n      return (performance.now() - action.start);\n    default:\n      return state;\n  }\n}","import React, { createContext, useReducer } from 'react';\nimport { AppState, initialState } from 'appState';\nimport { gameStateReducer, GameStateAction } from 'reducers/gameStateReducer';\nimport { warehouseReducer, WarehouseAction } from 'reducers/warehouseReducer';\nimport { statusTextReducer, StatusTextAction } from 'reducers/statusTextReducer';\nimport { PickingListsAction, pickingListsReducer } from 'reducers/pickingListsReducer';\nimport { mutedReducer, MutedReducerAction } from 'reducers/mutedReducer';\nimport { TimeReducerAction, timeReducer } from 'reducers/timeReducer';\n\n\nconst AppContext = createContext<{\n  state: AppState;\n  dispatch: React.Dispatch<AnyAction>;\n}>({\n  state: initialState,\n  dispatch: () => null\n});\n\n\nexport type AnyAction = GameStateAction\n | WarehouseAction\n | StatusTextAction\n | PickingListsAction \n | MutedReducerAction\n | TimeReducerAction;\n\nconst reducer = (state: AppState, action: AnyAction) => {\n  return {\n    gameState: gameStateReducer(state.gameState, action as GameStateAction),\n    statusText: statusTextReducer(state.statusText, action as StatusTextAction),\n    wms: state.wms, // read only\n    pickingLists: pickingListsReducer(state.pickingLists, action as PickingListsAction), \n    warehouse: warehouseReducer(state.warehouse, action as WarehouseAction),\n    muted: mutedReducer(state.muted, action as MutedReducerAction), // todo: settingsreducer?\n    time: timeReducer(state.time, action as TimeReducerAction)\n    \n  };\n};\n\nconst AppProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <AppContext.Provider value={{state, dispatch}}>\n      {children}\n    </AppContext.Provider>\n  )\n}\n\nexport { AppContext, AppProvider };","import React, { useRef,  useMemo } from 'react';\nimport { Sprite, Graphics, Container } from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\ninterface Props {\n  position?: PIXI.Point;\n  location?: [number, number];\n  tileWidth: number;\n  tileHeight: number;\n  selected: boolean;\n  behindWall?: boolean;\n  onClick?: (event: PIXI.interaction.InteractionEvent) => void;\n  onDragged?: (event: PIXI.interaction.InteractionEvent) => void;\n  onReleased?: (event: PIXI.interaction.InteractionEvent) => void;\n  delay?: number; // Wait this long before showing\n}\n\n\nconst Box = (props: Props & React.ComponentProps<typeof Container>) => {\n  const {\n    location = [0, 0],\n    tileWidth = 0, \n    tileHeight = 0,\n    behindWall,\n    selected\n  } = props;\n  const ref = useRef<PIXI.Container>(null);\n  const imgRef = useRef<PIXI.Sprite>(null);\n  const dragRef = useRef<PIXI.Sprite>(null);\n  const offset = useRef<PIXI.Point>();\n  const data = useRef<PIXI.interaction.InteractionData>();\n\n  const {x, y} = useMemo(() => {\n    return { \n      x: location[0] * tileWidth,\n      y: location[1] * tileHeight,\n    };\n  }, [location, tileWidth, tileHeight]);\n  \n  const onDragStart = (event: PIXI.interaction.InteractionEvent) => {\n    data.current = event.data;\n    event.currentTarget.zIndex = 6;\n    event.stopPropagation(); \n    if (props.onClick) props.onClick(event);\n\n    offset.current = data.current.getLocalPosition(ref.current!);\n\n    imgRef.current!.visible = false;\n    dragRef.current!.visible = true;\n  }\n  \n  const onDragEnd = (event: PIXI.interaction.InteractionEvent) => {\n    if (props.behindWall) {\n      event.currentTarget.zIndex = 3;\n    } else {\n      event.currentTarget.zIndex = 1;\n    }\n    data.current = undefined;\n\n    if (props.onReleased) props.onReleased(event);\n    imgRef.current!.visible = true;\n    dragRef.current!.visible = false;\n\n  }\n  \n  const onDragMove = (event: PIXI.interaction.InteractionEvent) => {\n    if (data.current && ref.current){\n      const parentPos = data.current.getLocalPosition(ref.current!.parent);\n      const position = new PIXI.Point(parentPos.x - offset.current!.x, parentPos.y - offset.current!.y);\n\n      ref.current!.position = position;\n      if (props.onDragged) props.onDragged(event);\n    }\n  }\n\n  const img = `${process.env.PUBLIC_URL}/images/box1${ props.behindWall ? 'b' : ''}.png`;\n\n  return (\n    <Container\n      { ...props }\n      x={x}\n      y={y}\n      ref={ref}\n      zIndex={(props.behindWall) ? 3 : 1} // boxes in front: 1, guy: 2, boxes in back: 3\n      mousedown={onDragStart}\n      touchstart={onDragStart}\n      mouseup={onDragEnd}\n      mouseupoutside={onDragEnd}\n      mousemove={onDragMove}\n      touchmove={onDragMove}\n    >\n      {selected && (\n        <Graphics draw={(graphics:PIXI.Graphics) => {\n            const line = 2;\n            const color = 0xffcc00;\n            // const color = 0xbada55;\n            graphics.clear();\n            graphics.lineStyle(line, color);\n            if (behindWall) {\n              graphics.drawRect(2, tileHeight / 2 - 1, tileWidth - 4, tileHeight / 2 + 2 );\n            }\n            else {\n              graphics.drawRect(2, -tileHeight / 2 - 1, tileWidth - 4, tileHeight + 2 );\n            }\n            graphics.endFill();\n          }}\n        />\n      )}\n      <Sprite \n        anchor={behindWall ? [0, -0.5] : [0, 0.5]}\n        image={img}\n        ref={imgRef}\n      />        \n      <Sprite \n        name=\"ghost\"\n        anchor={behindWall ? [0, -0.5] : [0, 0.5]}\n        alpha={0.9}\n        image={`${process.env.PUBLIC_URL}/images/box1.png`}\n        ref={dragRef}\n        visible={false}\n      />        \n    </Container>\n  );\n}\n\nexport default Box;\n\n","import React, { useState, useEffect, forwardRef, useRef, memo } from 'react';\nimport { useApp, useTick, Container, Text } from \"@inlet/react-pixi\";\nimport * as PIXI from 'pixi.js';\nimport SpriteAnimated from './SpriteAnimated';\n\nexport enum Orientation {\n  front = 'front',\n  left = 'left',\n  right = 'right',\n  back = 'back',\n}\n\ninterface Props {\n  atlas: string;\n  carryBox: boolean;\n}\n\nconst DEBUG = false;\n//\nconst Guy = forwardRef<PIXI.Container, any>((props: Props & React.ComponentProps<typeof Container>, ref) => {\n  const {\n    atlas,\n    carryBox,\n    ...containerProps\n  } = props;\n\n  const [frames, setFrames] = useState<{ [key: string]: PIXI.Texture[]}|null>(null);\n\n  const [orientation, setOrientation] = useState<Orientation>(Orientation.right);\n  const app = useApp();\n  const lastPositionPoint = useRef<PIXI.Point>();\n\n  useTick(() => {\n    if (!ref || !(ref as any).current) return;\n    const currentPosition = (ref as any).current.position as PIXI.Point;\n    const lastPosition = lastPositionPoint.current;\n    if (lastPosition && !lastPosition.equals(currentPosition)) {\n      const angle: number = Math.atan2(currentPosition.y - lastPosition.y, currentPosition.x - lastPosition.x);\n      if ((angle >= Math.PI / -4 && angle <= 0) || (angle >= 0 && angle <= Math.PI / 4)) {\n        // going right\n        setOrientation(Orientation.right);     \n      }\n      else if (angle >= Math.PI / 4 && angle <= Math.PI * .75) {\n        // going down\n        setOrientation(Orientation.front);\n      }\n      else if (angle > Math.PI * .75 || angle < Math.PI * -0.75){\n        // going left\n        setOrientation(Orientation.left);\n      } else {\n        // Going up\n        setOrientation(Orientation.back);\n      }\n    }\n    lastPositionPoint.current = currentPosition.clone();\n  });\n\n  useEffect(() => {\n    const loadingComplete = () => {\n      const allFrames = app.loader.resources[atlas].data.frames;\n      const indexedTextures = Object.keys(allFrames).reduce((acc: any, frame: string) => {\n        // frames are in the format of: 'front1', 'front2', 'left-box1' etc\n        // create a mapping keyed by the part without the number\n        const animation = frame.substring(0, frame.length - 1);\n        if (!acc[animation]) {\n          acc[animation] = [];\n        }\n        acc[animation].push(PIXI.Texture.from(frame));\n        return acc;\n      }, {});\n\n      setFrames(indexedTextures);\n    }\n\n    app.loader.onComplete.once(loadingComplete);\n    if (!app.loader.loading) {\n      app.loader.add(atlas).load();\n    }\n    \n  }, [app.loader, app.loader.loading, atlas, props.name]);\n\n  if (!frames) return null;\n  const animationFrames = frames[`${orientation}${carryBox ? '-box': ''}`];\n\n  return (\n    <Container \n      ref={ref}\n      zIndex={2}\n      { ...containerProps}\n    >\n      <SpriteAnimated\n        animationSpeed={0.15}\n        isPlaying={true}\n        textures={animationFrames}\n        anchor={[0, 0.1]}\n      />\n      { DEBUG && (<Text style={{\n        fontSize: 12,\n        align: 'center',\n        fill: '0xfff',\n        strokeThickness: 1,\n        wordWrap : true,\n        wordWrapWidth : 440\n      }}\n      text={`${props.name}`} />\n      )}\n    </Container>\n  )\n});\n\n// const areEqual = (a: React.ComponentProps<typeof Container>, b: React.ComponentProps<typeof Container>) => {\n//   return true;\n// }\nexport default memo(Guy);\n\n","import { PixiComponent, applyDefaultProps, AnimatedSprite } from '@inlet/react-pixi';\nimport * as PIXI from 'pixi.js';\n\nexport default PixiComponent<React.ComponentProps<typeof AnimatedSprite>, PIXI.AnimatedSprite>('SpriteAnimated', {\n  create: ({ textures }) => {\n    const animatedSprite = new PIXI.AnimatedSprite(textures || [], true);\n    return animatedSprite;\n  },\n  applyProps: (instance, oldProps, newProps) => {\n    applyDefaultProps(instance, oldProps, newProps);\n    instance.gotoAndPlay(0);\n  },\n});\n\n\n","import React, { useState, useEffect, useRef, memo } from 'react';\nimport * as PIXI from 'pixi.js';\nimport Guy from './Guy';\nimport { AnyAction } from 'components/context/AppProvider';\nimport { AStarFinder } from 'astar-typescript';\nimport { PickingList } from 'reducers/pickingListsReducer';\nimport { gsap, Linear } from 'gsap'\nimport { PixiPlugin } from 'gsap/all';\nimport { SPEED_MULTIPLIER } from 'constants/gameSettings';\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\ninterface Props {\n  pickingList?: PickingList;\n  homeLocation: [number, number];\n  dispatch: React.Dispatch<AnyAction>;\n  aStar: AStarFinder;\n  getProductLocation: (productCode: string) => { location: [number, number], far: boolean }\n}\n\nconst convertLocation = (location: [number, number]) => {\n  // This is the format AStarFind works with\n  return { x: location[0], y: location[1] }\n}\n//\nconst WarehouseGuy = (props: Props & React.ComponentProps<typeof Guy>) => {\n  const {\n    dispatch,\n    pickingList,\n    aStar,\n    homeLocation,\n    tileSize,\n    getProductLocation,\n    ...guyProps\n  } = props;\n\n  const guyRef = useRef(null);\n  const [carryBox, setCarryBox] = useState<boolean>(false);\n\n  const lastLocation = useRef<[number, number]>(homeLocation); // aStar has to know where this guy starts from\n  const currentDestination = useRef<string>();\n  \n  useEffect(() => {\n    if (!guyRef.current || !pickingList) return;\n\n    const { orderNo, products } = pickingList;\n    \n    //console.log(`[${props.name}] picking list: `, pickingList.products.find(value => !pickedProducts.includes(value)) )\n   \n    const productCode = products.find(value => !(pickingList.pickedProducts || []).includes(value));\n\n    const destination = (productCode || 'home');\n    if (currentDestination.current && (currentDestination.current === destination)) {\n      // if (destination === 'home') console.log(`[${props.name}] was already underway to ${destination} ${productCode} ${currentDestination.current}`)\n      // todo: this is to prevent the guy from starting another animation when another guy picks up a boxes\n      // Would be better to useMemo or something but cba now\n      return;\n    }\n    currentDestination.current = productCode || destination;\n\n    gsap.killTweensOf(guyRef.current);\n    const tl = gsap.timeline();\n    const pathStartLocation = convertLocation(lastLocation.current || homeLocation);\n\n    if (productCode) {\n      // There is a product to pick, go fetch it\n      \n      // Determine the path to this product\n      const {location, far} = getProductLocation(productCode);\n      // console.log(`[${props.name}] We need to pick ${productCode} (${orderNo}). It's location is ${location}. It's${far ? \"\" : \" not\"} far. We start at ${pathStartLocation.x}, ${pathStartLocation.y}}`);\n\n      const path = aStar?.findPath(pathStartLocation, convertLocation(location)) || [];\n      // create animation to walk this path\n      path.forEach((loc: number[]) => {\n        tl.to(guyRef.current, {\n          ease: Linear.easeNone,\n          pixi: { \n            x: loc[0] * tileSize,\n            y: loc[1] * tileSize\n          }, \n          duration: 1 / SPEED_MULTIPLIER + (far ? .035 : 0)  // it takes one second real time to walk one tile\n        });\n      }); \n      tl.to(guyRef.current, {\n        delay: far ? .2 : 0, // We cheat a bit to make the difference bigger. Taking a box from a 'far' location takes half a second longer\n        onComplete: () => { \n          // completed picking product\n          setCarryBox(true);\n          dispatch({ type: 'completeProductPick', productCode, orderNo});\n          //console.log(`[${props.name}] completed picking ${productCode} (${orderNo})`)\n          const endLocation = path[path.length - 1];\n          lastLocation.current = endLocation as [number, number];\n        },\n      })\n    } \n    else {\n      // All done with this order, return home\n      // console.log(`[${props.name}] I guess we are done. Time to return to ${homeLocation}`);\n        \n      // Determine the path home\n      const path = aStar?.findPath(pathStartLocation, convertLocation(homeLocation)) || [];\n      \n      // create animation to walk this path\n      path.forEach((loc: number[]) => {\n        tl.to(guyRef.current, {\n          ease: Linear.easeNone,\n          pixi: { \n            x: loc[0] * tileSize,\n            y: loc[1] * tileSize\n          }, \n          duration: 1 / SPEED_MULTIPLIER\n        });\n      }); \n      tl.to(guyRef.current, {\n        onComplete: () => { \n          // completed picking product\n          setCarryBox(false);\n          lastLocation.current = homeLocation;\n          dispatch({ type: 'completeOrder', orderNo });\n        },\n      })\n    }    \n  }, [aStar, dispatch, getProductLocation, homeLocation, pickingList, tileSize, props.name]);\n  \n  return (\n    <Guy\n      atlas={`${process.env.PUBLIC_URL}/images/sprites/guy/guy.json`} \n      x={homeLocation[0] * tileSize} \n      y={homeLocation[1] * tileSize}\n      carryBox={carryBox}\n      {...guyProps} \n      ref={guyRef} \n    />\n  )\n};\n\n// const areEqual = (a: React.ComponentProps<typeof Container>, b: React.ComponentProps<typeof Container>) => {\n//   return true;\n// }\nexport default memo(WarehouseGuy);\n","import React, { useEffect, useState, useRef, useCallback, useContext, useMemo } from \"react\";\nimport { Container, Stage, Sprite } from '@inlet/react-pixi';\nimport { AStarFinder } from \"astar-typescript\";\nimport { TiledMapData, TiledObjectData } from 'constants/tiledMapData';\nimport Tilemap from './Tilemap';\nimport BridgedStage from \"./pixi/util/BridgedStage\";\nimport { AppContext } from \"./context/AppProvider\";\nimport * as PIXI from 'pixi.js';\nimport Box from \"./pixi/Box\";\nimport { PixiPlugin } from 'gsap/all';\nimport { gsap } from 'gsap'\nimport { GameState } from \"reducers/gameStateReducer\";\nimport WarehouseGuy from \"./pixi/WarehouseGuy\";\nimport sound from 'pixi-sound';\nimport { PickingList } from \"reducers/pickingListsReducer\";\n\nPixiPlugin.registerPIXI(PIXI);\ngsap.registerPlugin(PixiPlugin);\n\nwindow.PIXI = PIXI;\n// eslint-disable-next-line import/first\nimport 'pixi-tilemap'; // tilemap is not a real npm module :/\n\nexport interface Props {\n  tilemap: string;\n  width: number;\n  height: number;\n  onProductClick: (productCode: string) => void;\n}\n\nconst Scene = (props: Props & React.ComponentProps<typeof Container>) => {\n  const {tilemap, width, height, ...restProps} = props;\n  const {state, dispatch} = useContext(AppContext);\n  const {warehouse} = state;\n\n  const [mapData, setMapData] = useState<TiledMapData>();\n  const [objects, setObjects] = useState<{[key: string]: TiledObjectData}>();\n  const [wallLocations, setWallLocations] = useState<[number, number][]>([]);\n  const [selectedBox, setSelectedBox] = useState<string>();\n  const ref = useRef<PIXI.Container>(null);\n\n  const jsonPath = `${process.env.PUBLIC_URL}/${tilemap}`;\n\n  useEffect(() => {\n    new PIXI.Loader().add(jsonPath).load((loader)=>{         \n      const mapData: TiledMapData = loader.resources[jsonPath].data;\n      setMapData(mapData);\n    });\n  }, [jsonPath]);\n\n  const basePath = jsonPath.substr(0, jsonPath.lastIndexOf('/'));\n\n  useEffect(() => {\n    sound.add('snap', `${process.env.PUBLIC_URL}/sound/snap.wav`);    \n    sound.add('whoosh', `${process.env.PUBLIC_URL}/sound/whoosh.mp3`);    \n    sound.add('bennyHill', `${process.env.PUBLIC_URL}/sound/BennyHill.mp3`);    \n  }, []);\n\n  useEffect(() => {\n    if (state.gameState === GameState.pickingBoxes && !state.muted) {\n      sound.play('bennyHill'); \n    } else {\n      sound.stop('bennyHill');\n    }\n  }, [state.gameState, state.muted])\n\n\n  const getObject = useCallback((location: [number, number]) => {\n    return objects?.[`${location[0]},${location[1]}`];\n  }, [objects]);\n\n  /** Returns the object if a rack is at given location */\n  const getRackAtLocation = useCallback((location: [number, number]) => {\n    // \n    const object = getObject(location);\n    const isRack = object?.properties?.some(p => p.name === 'rack' && p.value);\n    if (isRack) {\n      return object;\n    }\n  }, [getObject]);\n\n  /** Returns the object if a rack is at given location */\n  const getDockAtLocation = useCallback((location: [number, number]) => {\n    // \n    const object = getObject(location);\n    const isDock = object?.properties?.some(p => p.name === 'dock' && p.value);\n    if (isDock) {\n      return object;\n    }\n  }, [getObject]);\n\n  const getProductLocation = (productCode: string): { location: [number, number], far: boolean } => {\n    const {location} = state.warehouse.boxes[productCode];\n    //const far = !!rackFarLocations.find((l) => (l[0] === location[0] && l[1] === location[1]));\n    const far = false;\n    // Some products are considered 'far', it takes longer to pick those\n    return {\n      location,\n      far\n    };\n  };\n  \n  // Converts pixel coordinate to scene location\n  const pointToSceneLocation = useCallback((point: PIXI.Point): [number, number] => {\n    if (!mapData?.tilewidth || !mapData.tileheight) {\n      return [0, 0];\n    }\n    return [Math.floor(point.x / mapData?.tilewidth), Math.floor(point.y / mapData?.tileheight)];\n  }, [mapData]);\n  \n  const getBoxNameAtLocation = (location: [number, number]) => {\n    const entry = Object.entries(warehouse.boxes)\n      .find(([name, box]) => box.location[0] === location[0] && box.location[1] === location[1]);\n    if (entry) return entry[0];\n  }\n\n  const handleClick = (productCode: string, event: PIXI.interaction.InteractionEvent) => {\n    props.onProductClick(productCode);\n\n    setSelectedBox(productCode);\n  }\n\n\n  const handleDragged = (productCode: string, event: PIXI.interaction.InteractionEvent) => {\n    const position = event.data.global;\n    const location = pointToSceneLocation(position); // tile location\n\n    const object = getObject(location);\n    const isRack = object?.type === \"rack\";\n    let tint = 0xFFFFFF;\n    if (isRack) {\n      const otherBoxName = getBoxNameAtLocation(location);\n      if (!otherBoxName || otherBoxName === productCode) {\n        tint = 0x00FF30; // Can drop here\n      } else {\n        tint = 0xFF3300; // Can't drop on another box\n      }\n    }\n    setTint(event.currentTarget, tint);\n  }\n\n  const handleBoxDragEnd = (productCode: string, event: PIXI.interaction.InteractionEvent) => {\n    const position = event.data.global;\n    const location = pointToSceneLocation(position); // tile location\n\n    setTint(event.currentTarget, 0xFFFFFF);\n\n    const object = getObject(location);\n\n    if (object) {\n      const otherBoxName = getBoxNameAtLocation(location);\n      if (!otherBoxName || otherBoxName === productCode) {\n\n        if (otherBoxName !== productCode && !state.muted) sound.play(\"snap\");\n        const zone = object?.properties?.find(p => p.name === \"zone\")?.value;\n        dispatch({ type: 'placeBox', productCode, location, zone });\n        return;\n      }\n    }\n\n    // Couldn't place, fly back to origin\n    const box = warehouse.boxes[productCode];\n    const originX = box.location[0] * mapData!.tilewidth;\n    const originY = box.location[1] * mapData!.tileheight;\n\n    if (!state.muted) sound.play('whoosh'); \n    gsap.to(event.currentTarget, { \n      duration: .5,\n      ease: \"bounce.out\",\n      pixi: {\n        x: originX,\n        y: originY\n      }\n    });\n  }\n\n  const renderFloorStuff = () => {\n    return (\n      <>\n        <Sprite x={127} y={383} image={`${process.env.PUBLIC_URL}/images/sprites/floor/inbound.png`} />\n        <Sprite x={544} y={383} image={`${process.env.PUBLIC_URL}/images/sprites/floor/outbound.png`} />\n      </>\n    );\n  }\n\n  const renderBoxes = () => {\n    if (!mapData || !wallLocations.length) return null;\n    \n    return Object.entries(warehouse.boxes).map(([name, box]) => (\n      <Box \n        location={box.location} \n        tileWidth={mapData.tilewidth} \n        tileHeight={mapData.tileheight}\n        selected={name === selectedBox}\n        onClick={(event) => handleClick(name, event)}\n        onDragged={(event) => handleDragged(name, event)}\n        onReleased={(event) => handleBoxDragEnd(name, event)}\n        key={name}\n        behindWall={isNorthOfWall(box.location, wallLocations)}\n        interactive={state.gameState === GameState.placingBoxes}\n      />\n    ));\n  }\n\n  /** Returns true if the tile is blocked */\n  const locationIsBlocked = useCallback((location: [number, number]) => {\n    return wallLocations.some((l) => l[0] === location[0] && l[1] === location[1]);\n  }, [wallLocations]);\n\n  const aStar = useMemo(() => {\n    if (!mapData || !wallLocations.length) {\n        return null;\n    }\n    const matrix: number[][] = [];\n    for (let y = 0; y < mapData.height; y++) {\n        const row: number[] = [];\n        for (let x = 0; x < mapData.width; x++) {\n            const location: [number, number] = [x, y];\n            const blocked = locationIsBlocked(location);\n            row.push(blocked ? 1 : 0);\n        }\n        matrix.push(row);\n    }\n    return new AStarFinder({\n      grid: {\n          matrix\n      },\n      diagonalAllowed: false,\n      includeStartNode: false,\n      heuristic: \"Manhatten\",\n      weight: 0,\n    });\n  }, [mapData, locationIsBlocked, wallLocations]);\n\n  const [pickingList1, setPickingList1] = useState<PickingList>();\n  const [pickingList2, setPickingList2] = useState<PickingList>();\n  const [pickingList3, setPickingList3] = useState<PickingList>();\n\n  useEffect(() => {\n    if (state.gameState === GameState.pickingBoxes) {\n      setSelectedBox(undefined);\n\n      const nextPickingList1 = state.pickingLists.find((pL, i) => !pL.complete && i % 3 === 0);\n      setPickingList1(nextPickingList1);\n      const nextPickingList2 = state.pickingLists.find((pL, i) => !pL.complete && i % 3 === 1);\n      setPickingList2(nextPickingList2);\n      const nextPickingList3 = state.pickingLists.find((pL, i) => !pL.complete && i % 3 === 2);\n      setPickingList3(nextPickingList3);\n      \n      if (!nextPickingList1 && !nextPickingList2 && !nextPickingList3) {\n        dispatch({ type: 'completeGame' });\n      }\n    }\n  }, [dispatch, state.gameState, state.pickingLists]);\n  \n\n  const renderGuys = () => {\n    if (!aStar) return null;\n\n    return (\n      <>\n        <WarehouseGuy\n          name={'guy1'}\n          pickingList={pickingList1}  \n          homeLocation={[17, 12]}\n          tileSize={mapData!.tilewidth}\n          getProductLocation={getProductLocation}\n          dispatch={dispatch}\n          aStar={aStar}\n          visible={state.gameState === GameState.pickingBoxes}\n        />\n        <WarehouseGuy\n          name={'guy2'}\n          pickingList={pickingList2}  \n          homeLocation={[18, 12]}\n          tileSize={mapData!.tilewidth}\n          getProductLocation={getProductLocation}\n          dispatch={dispatch}\n          aStar={aStar}\n          visible={state.gameState === GameState.pickingBoxes}\n        />\n        <WarehouseGuy\n          name={'guy3'}\n          pickingList={pickingList3}  \n          homeLocation={[19, 12]}\n          tileSize={mapData!.tilewidth}\n          getProductLocation={getProductLocation}\n          dispatch={dispatch}\n          aStar={aStar}\n          visible={state.gameState === GameState.pickingBoxes}\n        />\n      </> \n    )\n  }\n\n  return (\n    <Stage width={width} height={height}>\n      <Container \n        ref={ref}\n        interactive={true}\n        hitArea={new PIXI.RoundedRectangle(0, 0, width, height, 0)}\n        sortableChildren\n        {...restProps}\n      >\n        { mapData && (\n          <>\n            <Tilemap \n              basePath={basePath} \n              data={mapData} \n              setObjects={setObjects}\n              setWallLocations={setWallLocations}\n            />\n            {renderFloorStuff()}\n            {renderBoxes()}\n            {renderGuys()}\n          </>\n        )}\n      </Container>\n    </Stage>\n  );\n}\n\nexport default Scene;\n\n// Sets tint on box\nconst setTint = (obj: PIXI.DisplayObject, tint: number) => {\n  const ghost = (obj as PIXI.Container).children.find(c => c.name === 'ghost');\n  if (ghost) {\n    (ghost as PIXI.Sprite).tint = tint; \n  }\n}\n\n// Returns true if the tile south of this one is a wall\nconst isNorthOfWall = (location: [number, number], wallLocations: [number, number][]) => {\n  return wallLocations.some(wL => wL[0] === location[0] && wL[1] === location[1] + 1);\n}\n","import React, { useEffect, useRef, useContext } from \"react\";\nimport { AppContext } from \"components/context/AppProvider\";\nimport { Categories, WMSData } from \"reducers/wmsReducer\";\n\n\ninterface Props {\n  selectedProduct?: string;\n}\n\nconst SKUProfile = (props: Props) => {\n  const tableRef = useRef<HTMLTableElement>(null);\n  const { state } = useContext(AppContext);\n  const data = state.wms;\n\n  useEffect(() => {\n    if (!tableRef.current) return;\n    const table = tableRef.current;\n    \n    // add highlight class \n    table.querySelectorAll(`tr[data-code=\"${props.selectedProduct}\"]`).forEach(row => {\n      row.classList.add(\"highlight\");\n      row.scrollIntoView({ block: 'end'});\n    });\n    return () => {\n    // Remove highlight class from prevously highlighted row\n      table.querySelectorAll('.highlight').forEach(row => {\n        row.classList.remove(\"highlight\");\n      });  \n    }\n  }, [props.selectedProduct]);\n\n  const renderContent = () => {\n    return (\n      <table ref={tableRef}>\n        <tbody>\n        <tr><td colSpan={2} className=\"category-header-a\">A. Fast-moving</td></tr>\n        {data.filter(row => row.category === Categories.A).map(row => renderRow(row))}\n        <tr><td colSpan={2} className=\"category-header-b\">B. Medium-moving</td></tr>\n        {data.filter(row => row.category === Categories.B).map(row => renderRow(row))}\n        <tr><td colSpan={2} className=\"category-header-c\">C. Slow-moving</td></tr>\n        {data.filter(row => row.category === Categories.C).map(row => renderRow(row))}\n        <tr><td colSpan={2} className=\"category-header-d\">D. Not-moving</td></tr>\n        {data.filter(row => row.category === Categories.D).map(row => renderRow(row))}\n        </tbody>\n      </table>\n    )\n  }\n\n  const renderRow = (row: WMSData) => {\n    return (\n      <>\n        <tr key={row.productCode} data-code={row.productCode}>\n          <td>{row.productCode}</td>\n          <td>{row.description}</td>\n          {/* <td>{row.slotting || \"\"}</td> */}\n        </tr>\n        {row.pair && (\n          <tr key={`${row.productCode}-pair`} data-code={row.productCode}>\n            <td colSpan={2} className=\"pair\">\n              {` Frequently sold with ${row.pair}`}\n            </td>\n          </tr>\n        )}\n      </>\n    )\n  }\n  return (\n    <>\n      <h2>SKU velocity profile</h2>\n      {renderContent()}\n    </>\n  )\n}\n\nexport default SKUProfile;","import React, { useContext } from \"react\";\nimport { AppContext } from \"components/context/AppProvider\";\nimport { PickingList } from \"reducers/pickingListsReducer\";\n\nconst PickingLists = () => {\n  const { state } = useContext(AppContext);\n  const data = state.pickingLists;\n  const productNameMap = state.wms.reduce((acc: {[key: string]: string}, value) => {\n    if (!acc[value.productCode]) {\n      acc[value.productCode] = value.description;\n    };\n    return acc;\n  }, {});\n  // useEffect(() => {\n  //   if (!tableRef.current) return;\n  //   const table = tableRef.current;\n    \n  //   // add highlight class \n  //   const row = table.querySelector(`tr[data-code=\"${props.selectedProduct}\"]`)\n  //   row?.classList.add(\"highlight\");\n  //   row?.scrollIntoView({ block: 'end'});\n  //   return () => {\n  //   // Remove highlight class from prevously highlighted row\n  //     table.querySelector(\".highlight\")?.classList.remove(\"highlight\");\n  //   }\n  // }, [props.selectedProduct]);\n\n  const renderContent = () => {\n    return (\n      data.map(pickingList => (\n        <div key={pickingList.orderNo}>\n          {renderPickingList(pickingList)}\n        </div>\n      ))\n    )\n  }\n\n  const renderPickingList = (pList: PickingList) => {\n    return (\n      <table>\n        <tbody>\n          <tr>\n            <td colSpan={3}>Order no: {pList.orderNo}</td>\n          </tr>\n          { pList.products.map(p => renderProduct(pList, p)) }\n        </tbody>\n      </table>\n    )\n  }\n\n  const renderProduct = (pList: PickingList, productCode: string) => {\n    const completed = pList.pickedProducts?.some(p => p === productCode);\n\n    return (\n      <tr key={productCode} className={completed ? \"completed\" : \"\"}>\n        <td></td>\n        <td>{productCode}</td>\n        <td>{productNameMap[productCode]}</td>\n      </tr>\n    )\n  }\n\n  return (\n    <>\n      <h2>Picking lists</h2>\n      {renderContent()}\n    </>\n  )\n}\n\nexport default PickingLists;","import React, { useContext } from 'react';\nimport { AppContext } from 'components/context/AppProvider';\nimport './ipad.css';\nimport SKUProfile from './content/SKUProfile';\nimport PickingLists from './content/PickingLists';\nimport { GameState } from 'reducers/gameStateReducer';\n\ninterface Props {\n  selectedProduct?: string;\n}\n\nconst IPad = (props: Props) => {\n  const { state } = useContext(AppContext);\n  const { gameState } = state;\n\n\n  const renderContent = () => {\n    switch (gameState) {\n      case GameState.placingBoxes:\n        return <SKUProfile selectedProduct={props.selectedProduct} />;\n      case GameState.pickingBoxes:\n      case GameState.complete:\n        return <PickingLists />;\n    }\n  }\n\n  return (\n    <div className=\"ipad\">\n      <div className=\"content\">\n        {renderContent()}\n      </div>\n    </div>      \n  )\n}\n\nexport default IPad;","import React, { useContext } from \"react\";\nimport { AppContext } from \"components/context/AppProvider\";\nimport './startButton.css';\nimport { GameState } from \"reducers/gameStateReducer\";\n\nconst StartButton = () => {\n  const { state, dispatch } = useContext(AppContext);\n\n  const handleClick = () => {\n    switch (state.gameState) {\n      case GameState.placingBoxes:\n        const allBoxedPlaced = !Object.values(state.warehouse.boxes).some(b => !(b.zone));\n        if(!allBoxedPlaced) {\n          dispatch({ type: 'setStatusText', text: \"First place all goods in the warehouse!\"});\n          return;\n        }\n        dispatch({ type: 'startPicking'});\n    \n        break;\n      case GameState.complete:\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n        break;\n    }\n  };\n\n  switch (state.gameState) {\n    case GameState.placingBoxes:\n      return <button onClick={handleClick} className=\"start-button\"><h1>Start</h1></button>;\n    default:\n      return null;\n  }\n}\n\nexport default StartButton;","import React, { useContext, useRef, useEffect, useState } from \"react\";\nimport { AppContext } from \"components/context/AppProvider\";\nimport './statusText.css';\nimport { GameState } from \"reducers/gameStateReducer\";\nimport { SPEED_MULTIPLIER } from \"constants/gameSettings\";\n\nconst StatusText = () => {\n  const { state, dispatch } = useContext(AppContext);\n  const text = state.statusText;\n  const time = state.time;\n\n  useEffect(() => {\n    let timeout: NodeJS.Timeout;\n    const start = performance.now();\n    if (state.gameState === GameState.pickingBoxes) {\n      const update = () => {\n        dispatch({type: 'tick', start})\n      };\n      timeout = setInterval(update, 100);\n    }\n    return () => {\n      clearTimeout(timeout);\n    }\n  }, [dispatch, state.gameState]);\n\n  if (state.gameState === GameState.pickingBoxes) {\n    const maxTime = 45000; // maximum amount of time\n    const progressBarWidth = Math.min(time / maxTime, 1);\n    const progressColor = time > 30000 ? \"#f63a0f\" : \"#86e01e\";\n\n    return (\n      <div className=\"status\">\n        <div className=\"progress\">\n          <div \n            className=\"progress-bar\"\n            style={{\n              width: `${progressBarWidth*100}%`,\n              backgroundColor: progressColor\n            }}\n          ></div>\n          <div className=\"text\">\n            {formatTime(time)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  return (\n    <div className=\"status\">{text}</div>\n  );\n}\n\nexport default StatusText;\n\nexport const formatTime = (ms: number ) => {\n  let seconds = (ms / 1000);\n  var hours = Math.floor( seconds / 3600 ); // 3,600 seconds in 1 hour\n  seconds = seconds % 3600;\n  var minutes = Math.floor( seconds / 60 );\n  seconds = seconds % 60;\n  if (hours > 0) {\n    return `${padLeft(hours)}:${padLeft(minutes)}:${seconds.toFixed(1).padStart(4, '0')}`;\n  } \n  return `${padLeft(minutes)}:${seconds.toFixed(1).padStart(4, '0')}`;\n}\n\nconst padLeft = (input: number) => {\n  return `${input}`.padStart(2, '0');\n}\n\n","import React, { useState, useContext } from \"react\";\nimport './settings.css';\nimport { AppContext } from \"components/context/AppProvider\";\n\nconst Settings = () => {\n  const { state, dispatch } = useContext(AppContext);\n\n  const handleMutedChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch({ type: 'setMuted', value: !e.target.checked})  \n  }\n  return (\n    <div className=\"settings\">\n      <input type=\"checkbox\" onChange={handleMutedChange} checked={state.muted === false} />\n      <label>Sound on</label>\n    </div>\n  )\n}\n\nexport default Settings;","import { useContext, useState, useEffect, useMemo, memo } from \"react\";\nimport React from \"react\";\nimport { GameState } from \"reducers/gameStateReducer\";\nimport { AppContext } from \"components/context/AppProvider\";\nimport \"./gameOverScreen.css\"\nimport { formatTime } from \"../StatusText\";\nimport { Categories, WMSData } from \"reducers/wmsReducer\";\n\nconst GameOverScreen = () => {\n  const { state, dispatch } = useContext(AppContext);\n  const [show, setShow] = useState(false); \n\n  const handleReset = () => {\n    setShow(false);\n    dispatch({ type: \"restart\" });\n  }\n  \n  useEffect(() => {\n    if (state.gameState === GameState.pickingBoxes) {\n      setTimeout(setShow, 700, true);\n    }\n  }, [state.gameState]);\n\n  let totalScore = 0;\n  const maxScore = 16;\n\n  // Create array of pairs (arrays)\n  const pairs = useMemo(() => {\n    return state.wms.filter(p => p.pair).reduce<[string, string][]>((acc, value) => {\n      const pair = acc.find(p => p.indexOf(value.pair!) > -1);\n      if (pair) {\n        pair[1] = value.productCode;\n      } else {\n        acc.push([value.productCode, \"\"])\n      }\n      return acc;\n    }, []);\n  }, [state.wms]);\n  \n  if (!show) {\n    return null;\n  }\n\n  const getProductRow = (display: string, category: Categories) => {\n    let correct = 0;\n    let total = 0;\n    const pointsPerProduct = 1;\n    state.wms.forEach((value: WMSData) => {\n      if (value.category === category) {\n        total++;\n        const {zone} = state.warehouse.boxes[value.productCode];\n        if (zone === category.toString()){\n          correct++;\n        }\n      }\n    })\n    const points = correct * pointsPerProduct;\n    totalScore += points;\n    return (\n      <li>{`${display} products placed correct = ${points}/${total * pointsPerProduct} points`}</li>\n    )\n  }\n  \n  const getPairRow = (pair: [string, string]) => {\n    const location1 = state.warehouse.boxes[pair[0]].location;\n    const location2 = state.warehouse.boxes[pair[1]].location;\n\n    const placedNext = (Math.abs(location1[0] - location2[0]) === 1) && location1[1] === location2[1];\n    let points = 0;\n    if (placedNext) {\n      points = 3;\n      totalScore += points;\n      return <li>{`Product pair (${pair}) placed near to each other = ${points}/3 points`}</li>\n    }\n    return <li>{`Product pair (${pair}) not placed near to each other = ${points}/3 points`}</li>\n  }\n\n  const getBinRow = () => {\n    let points = 0;\n    const nonMovers = state.wms.filter(p => p.category === Categories.D);\n    // All non movers should be in the bin zone\n    nonMovers.forEach(value => {\n      const {zone} = state.warehouse.boxes[value.productCode];\n      if (zone !== Categories.D.toString()){\n        points -= 5;\n      }\n    });\n    const movers = state.wms.filter(p => p.category !== Categories.D);\n    // All regular products should not be in the bin!\n    movers.forEach(value => {\n      const {zone} = state.warehouse.boxes[value.productCode];\n      if (zone === Categories.D.toString()){\n        points -= 5;\n      }\n    });\n    totalScore += points;\n    return <li>{`(only) non moving products placed in bin = ${points}/0 points`}</li>\n  }\n\n  return (\n    <div className=\"gameover-screen\">\n      <div className=\"text\">\n        <h1>Complete!</h1>\n        <ul>\n          {pairs.map(p => getPairRow(p))}\n          {getProductRow(\"Fast moving\", Categories.A)}\n          {getProductRow(\"Medium moving\", Categories.B)}\n          {getProductRow(\"Slow moving\", Categories.C)}\n          {getBinRow()}\n        </ul>\n\n        Your time: {formatTime(state.time)}\n        <div>\n          {`Total score: ${totalScore}/${maxScore}`}\n        </div>\n        <div className=\"button\">\n          <button onClick={handleReset}>\n            Try again?\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default memo(GameOverScreen);\n","import React, { useState } from 'react';\nimport './App.css';\nimport Scene from 'components/Scene';\nimport * as PIXI  from 'pixi.js';\nimport IPad from 'components/ui/IPad';\nimport StartButton from 'components/ui/StartButton';\nimport { AppProvider } from 'components/context/AppProvider';\nimport StatusText from 'components/ui/StatusText';\nimport Settings from 'components/ui/Settings';\nimport GameOverScreen from 'components/ui/GameOverScreen';\nwindow.PIXI = PIXI;\n\nfunction App() {\n  \n  const width = 21 * 32;\n  const height = 32 * 13;\n\n  const [selectedProduct, setSelectedProduct] = useState<string>();\n\n  return (\n    <AppProvider>\n      <div className=\"App\">\n        <Settings />\n        <Scene \n          tilemap=\"scenes/level2.json\" \n          width={width} \n          height={height}\n          onProductClick={setSelectedProduct}\n        />\n        <IPad selectedProduct={selectedProduct}/>\n        <StartButton />\n        <StatusText />\n        <GameOverScreen />\n      </div>\n    </AppProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}